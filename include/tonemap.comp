// ACES constants/transforms
const mat3 AP0_2_XYZ_MAT = mat3(0.9525523959, 0.3439664498, 0.0000000000, 0.0000000000, 0.7281660966, 0.0000000000, 0.0000936786, -0.0721325464, 1.0088251844);
const mat3 XYZ_2_AP0_MAT = mat3(1.0498110175, -0.4959030231, 0.0000000000, 0.0000000000, 1.3733130458, 0.0000000000, -0.0000974845, 0.0982400361, 0.9912520182);
const mat3 AP1_2_XYZ_MAT = mat3(0.6624541811, 0.2722287168, -0.0055746495, 0.1340042065, 0.6740817658, 0.0040607335, 0.1561876870, 0.0536895174, 1.0103391003);
const mat3 XYZ_2_AP1_MAT = mat3(1.6410233797, -0.6636628587, 0.0117218943, -0.3248032942, 1.6153315917, -0.0082844420, -0.2364246952, 0.0167563477, 0.9883948585);
const mat3 AP0_2_AP1_MAT = mat3(1.4514393161, -0.0765537734, 0.0083161484, -0.2365107469, 1.1762296998, -0.0060324498, -0.2149285693, -0.0996759264, 0.9977163014);
const mat3 AP1_2_AP0_MAT = mat3(0.6954522414, 0.0447945634, -0.0055258826, 0.1406786965, 0.8596711185, 0.0040252103, 0.1638690622, 0.0955343182, 1.0015006723);
const vec3 AP1_RGB2Y = vec3(0.2722287168, 0.6740817658, 0.0536895174);
const mat3 XYZ_2_sRGB_MAT = mat3(3.2409699419, -0.9692436363, 0.0556300797, -1.5373831776, 1.8759675015, -0.2039769589, -0.4986107603, 0.0415550574, 1.0569715142);
const mat3 sRGB_2_XYZ_MAT = mat3(0.4124564, 0.2126729, 0.0193339, 0.3575761, 0.7151522, 0.1191920, 0.1804375, 0.0721750, 0.9503041);
const mat3 XYZ_2_Rec2020_MAT = mat3(1.7166084, -0.6666829, 0.0176422, -0.3556621, 1.6164776, -0.0427763, -0.2533601, 0.0157685, 0.94222867);
const mat3 Rec2020_2_XYZ_MAT = mat3(0.6369736, 0.2627066, 0.0000000, 0.1446172, 0.6779996, 0.0280728, 0.1688585, 0.0592938, 1.0608437);
const mat3 XYZ_2_P3D65_MAT = mat3(2.4933963, -0.8294868, 0.0358507, -0.9313459, 1.7626597, -0.0761827, -0.4026945, 0.0236246, 0.9570140);
const mat3 P3D65_2_XYZ_MAT = mat3(0.4865906, 0.2289838, 0.0000000, 0.2656683, 0.6917402, 0.0451135, 0.1981905, 0.0792762, 1.0438031);
const mat3 D65_2_D60_CAT = mat3(1.01303, 0.00769823, -0.00284131, 0.00610531, 0.998165, 0.00468516, -0.014971, -0.00503203, 0.924507);
const mat3 D60_2_D65_CAT = mat3(0.987224, -0.00759836, 0.00307257, -0.00611327, 1.00186, -0.00509595, 0.0159533, 0.00533002, 1.08168);

// log10(x) = log(x) / log(10), we use precomputed 1/log(10):
const float oneoverlog10 = 0.434294481903251;

// const params
const float white_temp = 6500.0;
const float white_tint = 0.0;

const vec4 col_sat = vec4(1.15, 1.15, 1.15, 1.0);
const vec4 col_contrast = vec4(1.3, 1.3, 1.3, 1.0);
const vec4 col_gamma = vec4(1.0, 1.0, 1.0, 1.0);
const vec4 col_gain = vec4(1.15, 1.15, 1.15, 1.0);
const vec4 col_offset = vec4(0.0, 0.0, 0.0, 0.0);

const vec4 col_sat_shadows = vec4(1.0, 1.0, 1.0, 1.0);
const vec4 col_contrast_shadows = vec4(0.9, 0.9, 0.9, 1.0);
const vec4 col_gamma_shadows = vec4(1.0, 1.0, 1.0, 1.0);
const vec4 col_gain_shadows = vec4(1.0, 1.0, 1.0, 1.0);
const vec4 col_offset_shadows = vec4(0.01, 0.01, 0.01, 0.0);

const vec4 col_sat_midtones = vec4(0.9, 0.9, 0.9, 1.0);
const vec4 col_contrast_midtones = vec4(1.0, 1.0, 1.0, 1.0);
const vec4 col_gamma_midtones = vec4(1.0, 1.0, 1.0, 1.0);
const vec4 col_gain_midtones = vec4(1.0, 1.0, 1.0, 1.0);
const vec4 col_offset_midtones = vec4(0.0, 0.0, 0.0, 0.0);

const vec4 col_sat_highlights = vec4(1.0, 1.0, 1.0, 1.0);
const vec4 col_contrast_highlights = vec4(1.0, 1.0, 1.0, 1.0);
const vec4 col_gamma_highlights = vec4(1.0, 1.0, 1.0, 1.0);
const vec4 col_gain_highlights = vec4(1.0, 1.0, 1.0, 1.0);
const vec4 col_offset_highlights = vec4(0.0, 0.0, 0.0, 0.0);

const float col_correct_shadows_max = 0.09;
const float col_correct_highlights_min = 0.5;

const float blue_correction = 0.3;

struct filmic_params {
    float film_slope;
    float film_toe;
    float film_shoulder;
    float film_black_clip;
    float film_white_clip;
};

vec2 planckian_locus_chromaticity(float temp)
{
	float u = ( 0.860117757f + 1.54118254e-4f * temp + 1.28641212e-7f * temp*temp ) / ( 1.0f + 8.42420235e-4f * temp + 7.08145163e-7f * temp*temp );
	float v = ( 0.317398726f + 4.22806245e-5f * temp + 4.20481691e-8f * temp*temp ) / ( 1.0f - 2.89741816e-5f * temp + 1.61456053e-7f * temp*temp );

	float x = 3*u / ( 2*u - 8*v + 4 );
	float y = 2*v / ( 2*u - 8*v + 4 );

	return vec2(x,y);
}

vec2 d_illuminant_chromaticity(float temp)
{
	temp *= 1.4388 / 1.438;
	float x =	temp <= 7000 ?
				0.244063 + ( 0.09911e3 + ( 2.9678e6 - 4.6070e9 / temp ) / temp ) / temp :
				0.237040 + ( 0.24748e3 + ( 1.9018e6 - 2.0064e9 / temp ) / temp ) / temp;
	float y = -3 * x*x + 2.87 * x - 0.275;

	return vec2(x,y);
}

vec2 planckian_isothermal( float temp, float tint )
{
	float u = ( 0.860117757f + 1.54118254e-4f * temp + 1.28641212e-7f * temp*temp ) / ( 1.0f + 8.42420235e-4f * temp + 7.08145163e-7f * temp*temp );
	float v = ( 0.317398726f + 4.22806245e-5f * temp + 4.20481691e-8f * temp*temp ) / ( 1.0f - 2.89741816e-5f * temp + 1.61456053e-7f * temp*temp );

    float t = 1.41213984e6f + 1189.62f * temp + temp*temp;
	float ud = ( -1.13758118e9f - 1.91615621e6f * temp - 1.53177f * temp*temp ) / (t*t);
    t = 6.19363586e6f - 179.456f * temp + temp*temp;
	float vd = (  1.97471536e9f - 705674.0f * temp - 308.607f * temp*temp ) / (t*t);

	vec2 uvd = normalize(vec2(u, v));

	u += -uvd.y * tint * 0.05;
	v +=  uvd.x * tint * 0.05;

	float x = 3*u / ( 2*u - 8*v + 4 );
	float y = 2*v / ( 2*u - 8*v + 4 );

	return vec2(x,y);
}

vec3 xyY_to_XYZ(vec3 xyY)
{
	vec3 XYZ;
	XYZ.x = xyY.x * xyY.z / max( xyY.y, 1e-10);
	XYZ.y = xyY.z;
	XYZ.z = (1.0 - xyY.x - xyY.y) * xyY.z / max( xyY.y, 1e-10);
	return XYZ;
}

mat3 chromatic_adaptation(vec2 src_xy, vec2 dst_xy)
{
	const mat3 cone_response = mat3(0.8951, -0.7502, 0.0389, 0.2664, 1.7135, -0.0685, -0.1614, 0.0367, 1.0296);
	const mat3 inv_cone_response = mat3(0.9869929, 0.4323053, -0.0085287, -0.1470543, 0.5183603, 0.0400428, 0.1599627, 0.0492912, 0.9684867);

	vec3 src_XYZ = xyY_to_XYZ( vec3( src_xy, 1 ) );
	vec3 dst_XYZ = xyY_to_XYZ( vec3( dst_xy, 1 ) );

	vec3 src_coneResp = cone_response * src_XYZ;
	vec3 dst_coneResp = cone_response * dst_XYZ;

	mat3 von_kries = mat3(
		dst_coneResp[0] / src_coneResp[0], 0.0, 0.0,
		0.0, dst_coneResp[1] / src_coneResp[1], 0.0,
		0.0, 0.0, dst_coneResp[2] / src_coneResp[2]
    );

	return inv_cone_response * von_kries * cone_response;
}

vec3 white_balance(vec3 lin_col)
{
	vec2 src_white_daylight = d_illuminant_chromaticity( white_temp );
	vec2 src_white_planckian = planckian_locus_chromaticity( white_temp );

	vec2 src_white = white_temp < 4000 ? src_white_planckian : src_white_daylight;
	vec2 d65_white = vec2( 0.31270,  0.32900 );

    src_white += planckian_isothermal( white_temp, white_tint ) - src_white_planckian;

	mat3 white_balance_transform = chromatic_adaptation( src_white, d65_white );
	return XYZ_2_sRGB_MAT * white_balance_transform * sRGB_2_XYZ_MAT * lin_col;
}

vec3 color_correct(vec3 working_col,
	               vec4 col_sat,
	               vec4 col_contrast,
	               vec4 col_gamma,
	               vec4 col_gain,
	               vec4 col_offset)
{
	float Luma = dot( working_col, AP1_RGB2Y );
	working_col = max( vec3(0.0), mix( Luma.xxx, working_col, col_sat.xyz*col_sat.w ) );
	working_col = pow( working_col * (1.0 / 0.18), col_contrast.xyz*col_contrast.w ) * 0.18;
	working_col = pow( working_col, 1.0 / (col_gamma.xyz*col_gamma.w) );
	working_col = working_col * (col_gain.xyz * col_gain.w) + (col_offset.xyz + col_offset.w);
	return working_col;
}

vec3 color_correct_all( vec3 working_col )
{
	float Luma = dot( working_col, AP1_RGB2Y );

	vec3 cc_col_shadows = color_correct(working_col,
		col_sat_shadows*col_sat,
		col_contrast_shadows*col_contrast,
		col_gamma_shadows*col_gamma,
		col_gain_shadows*col_gain,
		col_offset_shadows+col_offset);
	float cc_w_shadows = 1- smoothstep(0, col_correct_shadows_max, Luma);

	vec3 cc_col_high = color_correct(working_col,
		col_sat_highlights*col_sat,
		col_contrast_highlights*col_contrast,
		col_gamma_highlights*col_gamma,
		col_gain_highlights*col_gain,
		col_offset_highlights+col_offset);
	float cc_w_high = smoothstep(col_correct_highlights_min, 1, Luma);

	vec3 cc_col_mids = color_correct(working_col,
		col_sat_midtones*col_sat,
		col_contrast_midtones*col_contrast,
		col_gamma_midtones*col_gamma,
		col_gain_midtones*col_gain,
		col_offset_midtones+col_offset);
	float cc_w_mids = 1 - cc_w_shadows - cc_w_high;

	return cc_col_shadows*cc_w_shadows + cc_col_mids*cc_w_mids + cc_col_high*cc_w_high;
}


vec3 linear_to_srgb(vec3 lin)
{
    float r = (lin.r < 0.00313067) ? lin.r * 12.92 : (pow(lin.r, (1.0/2.4)) * 1.055 - 0.055);
    float g = (lin.g < 0.00313067) ? lin.g * 12.92 : (pow(lin.g, (1.0/2.4)) * 1.055 - 0.055);
    float b = (lin.b < 0.00313067) ? lin.b * 12.92 : (pow(lin.b, (1.0/2.4)) * 1.055 - 0.055);
    return vec3(r, g, b);
}

float rgb_to_saturation( vec3 rgb )
{
	float minrgb = min( min(rgb.r, rgb.g ), rgb.b );
	float maxrgb = max( max(rgb.r, rgb.g ), rgb.b );
	return ( max( maxrgb, 1e-10 ) - max( minrgb, 1e-10 ) ) / max( maxrgb, 1e-2 );
}

float rgb_to_yc(vec3 rgb)
{
	float r = rgb[0];
	float g = rgb[1];
	float b = rgb[2];
	float chroma = sqrt(b*(b-g)+g*(g-r)+r*(r-b));
	return ( b + g + r + 1.75 * chroma) / 3.;
}

float sigmoid_shaper( float x)
{
	float t = max( 1 - abs( 0.5 * x ), 0 );
	float y = 1 + sign(x) * (1 - t*t);
	return 0.5 * y;
}

float glow_fwd( float ycIn, float glowGainIn, float glowMid)
{
   float glowGainOut;

   if (ycIn <= 2./3. * glowMid) {
	 glowGainOut = glowGainIn;
   } else if ( ycIn >= 2 * glowMid) {
	 glowGainOut = 0;
   } else {
	 glowGainOut = glowGainIn * (glowMid / ycIn - 0.5);
   }

   return glowGainOut;
}

float rgb_to_hue( vec3 rgb )
{
	// Returns a geometric hue angle in degrees (0-360) based on RGB values.
	// For neutral colors, hue is undefined and the function will return a quiet NaN value.
	float hue;
	if (rgb[0] == rgb[1] && rgb[1] == rgb[2])
	{
		//hue = FLT_NAN; // RGB triplets where RGB are equal have an undefined hue
		hue = 0;
	}
	else
	{
		hue = (180. / PI) * atan(sqrt(3.0)*(rgb[1] - rgb[2]), 2 * rgb[0] - rgb[1] - rgb[2]);
	}

	if (hue < 0.)
		hue = hue + 360;

	return clamp( hue, 0, 360 );
}

float center_hue( float hue, float center)
{
	float hueCentered = hue - center;
	if (hueCentered < -180.)
		hueCentered += 360;
	else if (hueCentered > 180.)
		hueCentered -= 360;
	return hueCentered;
}

vec3 log_to_lin( vec3 log_col )
{
	return exp2((log_col - 444.0 / 1023.0 ) * 14.0 ) * 0.18;
}

vec3 lin_to_log( vec3 lin_col )
{
	return saturate(log2(lin_col) / 14.0 - log2(0.18) / 14.0 + 444.0 / 1023.0);
}


vec3 film_tonemap(vec3 lin_col, filmic_params params)
{
	const mat3 sRGB_2_AP0 = XYZ_2_AP0_MAT * D65_2_D60_CAT * sRGB_2_XYZ_MAT;
	const mat3 sRGB_2_AP1 = XYZ_2_AP1_MAT * D65_2_D60_CAT * sRGB_2_XYZ_MAT;
	const mat3 AP0_2_sRGB = XYZ_2_sRGB_MAT * D60_2_D65_CAT * AP0_2_XYZ_MAT;
	const mat3 AP1_2_sRGB = XYZ_2_sRGB_MAT * D60_2_D65_CAT * AP1_2_XYZ_MAT;
	const mat3 AP0_2_AP1  = XYZ_2_AP1_MAT * AP0_2_XYZ_MAT;
	const mat3 AP1_2_AP0  = XYZ_2_AP0_MAT * AP1_2_XYZ_MAT;

	vec3 ap0 = AP1_2_AP0 * lin_col;
	float saturation = rgb_to_saturation( ap0 );
	float ycIn = rgb_to_yc( ap0 );
	float s = sigmoid_shaper( (saturation - 0.4) / 0.2);
	float addedGlow = 1 + glow_fwd( ycIn, 0.05 * s, 0.08);
	ap0 *= addedGlow;

	float hue = center_hue(rgb_to_hue(ap0), 0.0);
    float tmp = smoothstep( 0, 1, 1 - abs( 2 * hue / 135.0 ) );
	float hue_weight = tmp*tmp;

	ap0.r += hue_weight * saturation * (0.03 - ap0.r) * (1. - 0.82);
	vec3 working_col = AP0_2_AP1_MAT * ap0;
	working_col = max( vec3(0), working_col );

	working_col = mix( vec3(dot( working_col, AP1_RGB2Y )), working_col, 0.96 );

	const float toe_scale      = 1 + params.film_black_clip - params.film_toe;
	const float shoulder_scale = 1 + params.film_white_clip - params.film_shoulder;

	float toe_match;
	if(params.film_toe > 0.8) {
		toe_match = ( 1 - params.film_toe  - 0.18 ) / params.film_slope + oneoverlog10 * log(0.18);
	} else {
		const float bt = ( 0.18 + params.film_black_clip ) / toe_scale - 1;
		toe_match = oneoverlog10 * log(0.18) - 0.5 * log( (1+bt)/(1-bt) ) * (toe_scale / params.film_slope);
	}

	float straight_match = ( 1 - params.film_toe ) / params.film_slope - toe_match;
	float shoulder_match = params.film_shoulder / params.film_slope - straight_match;

	vec3 log_col = oneoverlog10 * log( working_col );
	vec3 straight_col = params.film_slope * ( log_col + straight_match );

	vec3 toe_col		= (    -params.film_black_clip ) + (2 *      toe_scale) / ( 1 + exp( (-2 * params.film_slope /      toe_scale) * ( log_col -      toe_match ) ) );
	vec3 shoulder_col	= ( 1 + params.film_white_clip ) - (2 * shoulder_scale) / ( 1 + exp( ( 2 * params.film_slope / shoulder_scale) * ( log_col - shoulder_match ) ) );

	toe_col.r = log_col.r < toe_match ? toe_col.r : straight_col.r;
	toe_col.g = log_col.g < toe_match ? toe_col.g : straight_col.g;
	toe_col.b = log_col.b < toe_match ? toe_col.b : straight_col.b;
	shoulder_col.r = log_col.r > shoulder_match ? shoulder_col.r : straight_col.r;
	shoulder_col.g = log_col.g > shoulder_match ? shoulder_col.g : straight_col.g;
	shoulder_col.b = log_col.b > shoulder_match ? shoulder_col.b : straight_col.b;

	vec3 t = saturate( ( log_col - toe_match ) / ( shoulder_match - toe_match ) );
	t = shoulder_match < toe_match ? 1 - t : t;
	t = (3-2*t)*t*t;
	vec3 tone_col = mix( toe_col, shoulder_col, t );

	return max(vec3(0), mix( vec3(dot( vec3(tone_col), AP1_RGB2Y )), tone_col, 0.93 ));
}

vec3 neutral_map(vec3 in_col,
                 filmic_params film_params)
{
	const mat3 sRGB_2_AP1 = XYZ_2_AP1_MAT  * D65_2_D60_CAT * sRGB_2_XYZ_MAT;
	const mat3 AP1_2_sRGB = XYZ_2_sRGB_MAT * D60_2_D65_CAT * AP1_2_XYZ_MAT;
	const mat3 AP0_2_AP1 = XYZ_2_AP1_MAT * AP0_2_XYZ_MAT;
	const mat3 AP1_2_AP0 = XYZ_2_AP0_MAT * AP1_2_XYZ_MAT;

	vec3 lin_col = log_to_lin(in_col) - log_to_lin(vec3(0));

	vec3 balanced_col = white_balance(lin_col);
	vec3 ap1 = sRGB_2_AP1 * balanced_col;
	ap1 = color_correct_all( ap1 );

	const mat3 blue_correct = mat3(0.9404372683, 0.0083786969, 0.0005471261, -0.0183068787,  0.8286599939, -0.0008833746, 0.0778696104, 0.1629613092, 1.0003362486);
	const mat3 blue_correct_inv = mat3(1.06318, -0.0106337, -0.000590887, 0.0233956, 1.20632, 0.00105248, -0.0865726, -0.19569, 0.999538);
	const mat3 blue_correct_ap1 = AP0_2_AP1 * blue_correct * AP1_2_AP0;
	const mat3 blue_correct_inv_ap1 = AP0_2_AP1 * blue_correct_inv * AP1_2_AP0;

	ap1 = mix(ap1, blue_correct_ap1 * ap1, blue_correction);
	ap1 = film_tonemap(ap1, film_params);
	ap1 = mix(ap1, blue_correct_inv_ap1 * ap1, blue_correction);

	vec3 film_col = max(vec3(0), AP1_2_sRGB * ap1);
	return linear_to_srgb(film_col);
}

vec3 gamma_map(vec3 lin) {
    vec3 srgb;
    srgb.r = pow(lin.r, 1.0 / 2.2);
    srgb.g = pow(lin.g, 1.0 / 2.2);
    srgb.b = pow(lin.b, 1.0 / 2.2);
    return srgb;
}

vec3 inv_gamma_map(vec3 srgb) {
    vec3 lin;
    lin.r = pow(srgb.r, 2.2);
    lin.g = pow(srgb.g, 2.2);
    lin.b = pow(srgb.b, 2.2);
    return lin;
}

vec4 tonemap(vec4 in_color,
             filmic_params film_params)
{
    vec3 col = lin_to_log( in_color.rgb + log_to_lin(vec3(0.0)));
    col = neutral_map(col, film_params);
    /* float luminance = dot(col, vec3(0.299f, 0.587f, 0.114f)); */
    float luminance = 1.0;
    return vec4(col, saturate(luminance));
}
